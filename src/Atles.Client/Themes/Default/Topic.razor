@inherits Atles.Client.Components.Themes.TopicComponent

@if (Model == null)
{
    <Loading />
}
else
{
    if (DisplayPage)
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">@Loc["Home"]</a></li>
                <li class="breadcrumb-item"><a href="@Url.Forum(Model.Forum.Slug)">@Model.Forum.Name</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Topic.Title</li>
            </ol>
        </nav>

        <div class="row">
            <div class="col">
                <h4 class="mb-3">
                    <span class="small">
                        @if (Model.Topic.Pinned)
                        {
                            <i class="fas fa-thumbtack small mr-1"></i>
                        }
                        @if (Model.Topic.Locked)
                        {
                            <i class="fas fa-lock small mr-1"></i>
                        }
                    </span>
                    @Model.Topic.Title
                </h4>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col">
                        <div class="container">
                            <div class="row small">
                                <div><Avatar GravatarHash="@Model.Topic.GravatarHash" GravatarSize="32" Class="mr-3"></Avatar></div>
                                <div>
                                    <div class="font-weight-bold"><a href="/user/@Model.Topic.UserId">@Model.Topic.UserDisplayName</a></div>
                                    <div class="text-secondary">@Model.Topic.TimeStamp.ToAppLocalDateAndTime()</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col text-right">
                        <TopicMenu TopicId="@Model.Topic.Id"
                                   ForumId="@Model.Forum.Id"
                                   CanEdit="CanEditTopic()"
                                   CanModerate="Model.Permissions.CanModerate"
                                   CanDelete="CanDeleteTopic()"
                                   PinCallback="@(async () => await PinAsync())"
                                   LockCallback="@(async () => await LockAsync())"
                                   Subscribed="Model.Topic.Subscribed"
                                   AddSubscriptionCallback="@(async () => await AddSubscriptionAsync())"
                                   RemoveSubscriptionCallback="@(async () => await RemoveSubscriptionAsync())"
                                   Pinned="Model.Topic.Pinned"
                                   Locked="Model.Topic.Locked" />
                    </div>
                </div>
                <div class="card-text">@((MarkupString)Model.Topic.Content)</div>
                <div class="card-text small pb-3">
                    <span class="font-weight-bold">@Model.Topic.Reactions.Sum(x => x.Count)</span> @Loc["Likes"]
                </div>
                <div class="card-text border-top pt-3">
                    <ReactionButtons PostId="Model.Topic.Id" 
                                     CanReact="CanReact()"
                                     AddReactionCallback="AddReactionAsync"
                                     RemoveReactionCallback="RemoveReactionAsync"
                                     Reacted="UserTopicReactions.HasReactedTo(Model.Topic.Id)" />
                </div>
            </div>
        </div>

        @if (Model.Topic.HasAnswer)
        {
            <a id="@Model.Answer.Id"></a>
            <div class="card border-success mb-3">
                <div class="card-header text-success"><i class="fas fa-check mr-2"></i>@Loc["Accepted Answer"]</div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col">
                            <div class="container">
                                <div class="row small">
                                    <div><Avatar GravatarHash="@Model.Answer.GravatarHash" GravatarSize="32" Class="mr-3"></Avatar></div>
                                    <div>
                                        <div class="font-weight-bold"><a href="/user/@Model.Answer.UserId">@Model.Answer.UserDisplayName</a></div>
                                        <div class="text-secondary">@Model.Answer.TimeStamp.ToAppLocalDateAndTime()</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col text-right">
                            <PostMenu PostId="@Model.Answer.Id"
                                      CanRemoveAnswer="CanEditTopic()"
                                      RemoveAnswerCallback="@(async () => await SetAnswerAsync(Model.Answer.Id, false))"
                                      CanEdit="CanEditReply(Model.Answer.IdentityUserId)"
                                      EditCallback="@(async () => await EditReplyAsync(Model.Answer.Id, Model.Answer.OriginalContent, Model.Answer.UserId, true))"
                                      CanDelete="CanDeleteReply(Model.Answer.IdentityUserId)"
                                      DeleteCallback="() => SetDeleteReplyId(Model.Answer.Id)"/>
                        </div>
                    </div>
                    <div class="card-text">@((MarkupString)Model.Answer.Content)</div>
                    <div class="card-text small pb-3">
                        <span class="font-weight-bold">@Model.Answer.Reactions.Sum(x => x.Count)</span> @Loc["Likes"]
                    </div>
                    <div class="card-text border-top pt-3">
                        <ReactionButtons PostId="Model.Answer.Id" 
                                         CanReact="CanReact()"
                                         AddReactionCallback="AddReactionAsync"
                                         RemoveReactionCallback="RemoveReactionAsync"
                                         Reacted="UserTopicReactions.HasReactedTo(Model.Answer.Id)" />
                    </div>
                </div>
            </div>
        }

        <a id="replies"></a>
        <h5 class="mb-3">@Loc["Replies"]</h5>

        <div class="row">
            <div class="col input-group mb-3">
                <input type="text" class="form-control" placeholder="@Loc["Search replies"]" @bind-value="Search" @bind-value:event="oninput" @onkeyup="MyKeyUpAsync">
                <button class="btn bg-transparent text-secondary" style="margin-left: -40px; z-index: 100;" @onclick="@(async () => await ClearSearchAsync())">
                    <i class="fa fa-times"></i>
                </button>
                <div class="input-group-append">
                    <button class="btn btn-secondary" type="button" @onclick="@(async () => await SearchAsync())">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
            <div class="col text-right mb-3">
                @if (CanCreateReply())
                {
                    <a href="#" @onclick:preventDefault="true" @onclick="@(async () => await NewReplyAsync())" class="btn btn-primary @CssClassDisabled" role="button">@Loc["Reply"]</a>
                }
            </div>
        </div>

        @if (Model.Replies == null)
        {
            <Loading />
        }
        else
        {
            if (Model.Replies.Items.Count == 0)
            {
                <NoRecords Text="@NoRecordsText"></NoRecords>
            }
            else
            {
                <div class="card">
                    <ul class="list-group list-group-flush">
                        @foreach (var reply in Model.Replies.Items)
                        {
                            <li class="list-group-item py-3">
                                <a id="@reply.Id"></a>
                                <div class="row mb-3">
                                    <div class="col">
                                        <div class="container">
                                            <div class="row small">
                                                <div><Avatar GravatarHash="@reply.GravatarHash" GravatarSize="32" Class="mr-3"></Avatar></div>
                                                <div>
                                                    <div class="font-weight-bold"><a href="/user/@reply.UserId">@reply.UserDisplayName</a></div>
                                                    <div class="text-secondary">@reply.TimeStamp.ToAppLocalDateAndTime()</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col text-right">
                                        <PostMenu PostId="@reply.Id"
                                                  CanAcceptAnswer="CanEditTopic() && !Model.Topic.HasAnswer"
                                                  AcceptAnswerCallback="@(async () => await SetAnswerAsync(reply.Id, true))"
                                                  CanEdit="CanEditReply(reply.IdentityUserId)"
                                                  EditCallback="@(async () => await EditReplyAsync(reply.Id, reply.OriginalContent, reply.UserId))"
                                                  CanDelete="CanDeleteReply(reply.IdentityUserId)"
                                                  DeleteCallback="() => SetDeleteReplyId(reply.Id)"/>
                                    </div>
                                </div>
                                <div class="card-text">@((MarkupString)reply.Content)</div>
                                <div class="card-text small pb-3">
                                    <span class="font-weight-bold">@reply.Reactions.Sum(x => x.Count)</span> @Loc["Likes"]
                                </div>
                                <div class="card-text border-top pt-3">
                                    <ReactionButtons PostId="reply.Id" 
                                                     CanReact="CanReact()"
                                                     AddReactionCallback="AddReactionAsync"
                                                     RemoveReactionCallback="RemoveReactionAsync"
                                                     Reacted="UserTopicReactions.HasReactedTo(reply.Id)" />
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
            <div class="mt-3">
                <Pager @ref="Pager" CurrentPage="@CurrentPage" TotalPages="@TotalPages" OnLoadDataCallback="@ChangePageAsync"></Pager>
            </div>
        }

        @if (CanCreateReply())
        {
            <h5 class="mb-3">@ReplyTitleText</h5>
            <div class="row">
                <div class="col-md-8">
                    <a id="reply"></a>
                    <EditForm Context="PostContext" Model="@Model.Post" OnValidSubmit="SaveReplyAsync">
                        <DataAnnotationsValidator />
                        <Editor @bind-Value="@Model.Post.Content" Rows="10"></Editor>
                        <div class="form-group">
                            <div class="row">
                                <div class="col">
                                    <input type="submit" value="@ReplyButtonText" class="btn btn-primary mb-1 @CssClassDisabled" />
                                    @if ((Model.Post.Id != null))
                                    {
                                        <button type="button" class="btn btn-secondary mb-1" @onclick="Cancel">@Loc["Cancel"]</button>
                                    }
                                </div>
                                <div class="col text-center">
                                    @if (SavingData)
                                    {
                                        <Loading />
                                    }
                                </div>
                                <div class="col small text-right mt-2">
                                    <a href="https://www.markdownguide.org/cheat-sheet" target="_blank"><i class="fab fa-markdown mr-2" style="font-size: 1.5rem; vertical-align: middle;"></i>@Loc["Guide"]</a>
                                </div>
                            </div>
                        </div>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <p class="mt-4">
                <AuthorizeView>
                    <Authorized>
                        <i class="fas fa-comment-slash mr-1"></i>
                        @Loc["You are not authorized to reply"]
                    </Authorized>
                    <NotAuthorized>
                        <i class="fas fa-sign-in-alt mr-1"></i>
                        @((MarkupString)string.Format(Loc["{0} to reply"], $"<a href=\"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}\">{Loc["Log in"]}</a>"))
                    </NotAuthorized>
                </AuthorizeView>
            </p>
        }

        <ConfirmModal Id="confirm-modal-delete-topic"
                      Title="@Loc["Delete Topic"]"
                      Body="@Loc["Are you sure you want to delete this Topic?"]"
                      Button="@Loc["Delete Topic"]"
                      OnClickCallback="@DeleteTopicAsync" />

        <ConfirmModal Id="confirm-modal-delete-reply"
                      Title="@Loc["Delete Reply"]"
                      Body="@Loc["Are you sure you want to delete this Reply?"]"
                      Button="@Loc["Delete Reply"]"
                      OnClickCallback="@DeleteReplyAsync" />
    }
    else
    {
        <SomethingWrong />
    }
}